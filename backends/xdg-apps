#!/usr/bin/python3


# This parses .desktop files used by the XDG spec.
# NOTE: It does it *very* crudely, and consequently can't
# handle one file containing multiple definitions.
# e.g. /usr/share/applications/chromium-browser.desktop.
# e.g. /usr/share/applications/libreoffice-startcenter.desktop


import os


def scan(location):
    print("# Files in %s" % location)
    filenames = os.listdir(location)
    for filename in filenames:
        filepath = os.path.join(location, filename)
        if os.path.isdir(filepath):
            scan(filepath)
        elif "/screensavers/" in filepath:
            continue
        elif filename.endswith(".desktop"):
            try:
                use_desktop_file(filepath)
            except Exception as exc:
                print("# Cannot load %s: %r" % (filepath, exc))
        else:
            pass


def use_desktop_file(filepath):
    properties = {}
    with open(filepath) as fileobj:
        for line in fileobj.readlines():
            key, equals, value = line.partition("=")
            if equals != "=":
                continue
            properties[key.strip()] = value.strip()
    if properties.get("NoDisplay", "false") == "true":
        return  # ignore mimetype association files etc
    print(" ".join((
        "addchoice",
        "--id='%s'" % filepath,
        "--title='%s'" % build_title(properties),
        "--cmd='%s'" % subst_cleanse(properties['Exec']),
    )))


def build_title(properties):
    parts = []
    for key in ("Name[en_GB]", "Name"):
        if key in properties:
            parts.append(properties[key])
            break
    for key in ("GenericName[en_GB]", "GenericName"):
        if key in properties:
            parts.append(properties[key])
            break
    for key in ("Comment[en_GB]", "Comment"):
        if key in properties:
            parts.append(properties[key])
            break
    return " // ".join(parts)


def subst_cleanse(command):
    inchars, outchars = iter(command), []
    for char in inchars:
        if char == '%':
            if next(inchars) == "%":
                outchars.append("%")
        else:
            outchars.append(char)
    return "".join(outchars)


def test_chars():
    print("Testing")
    assert subst_cleanse("foo bar baz") == "foo bar baz"
    assert subst_cleanse("foo %U baz") == "foo  baz"


def main():
    locations = [
        # needs the menu-xdg package installed:
        "/var/lib/menu-xdg/applications/menu-xdg",
        # default XDG specification locations:
        "/usr/share/applications/",
        "/usr/local/share/applications/",
        os.environ['HOME'] + "/.local/share/applications",
    ]
    for datadir in os.environ.get("XDG_DATA_DIRS", "").split(":"):
        appdir = os.path.join(datadir, "applications")
        if appdir not in locations:
            locations.append(appdir)
    for location in locations:
        print("# Loading from %r" % location)
        if os.path.isdir(location):
            scan(location)


if __name__ == '__main__':
    main()
    #test_chars()
