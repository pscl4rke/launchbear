#!/usr/bin/env python

"""
//  LAUNCHBEAR

Launchbear is a piece of middleware designed to launch applications
in a GUI environment.  It takes selectable items from plugins, and
allows them to be picked using a front-end.
"""


import os
import shlex
import subprocess


class ChoiceGenerator:
    """A backend that provides a number of choices."""

    def __init__(self):
        """Create a new ChoiceGenerator."""
        self._choices = []

    def choices(self):
        """Returns a set of choices."""
        choices_available = {}
        for choice in self._choices:
            if "id" not in choice:
                continue
            choices_available[choice["id"]] = choice
        return choices_available

    def parse(self, stream):
        """Build a set of choices from a file stream."""
        for line in stream.readlines():
            arguments = shlex.split(line, comments=True)
            if len(arguments) == 0:
                continue
            handler_name = "handle_%s" % arguments[0]
            if not hasattr(self, handler_name):
                print "Unknown directive '%s'" % arguments[0]
            else:
                getattr(self, handler_name)(arguments[1:])

    def handle_addchoice(self, arguments):
        choice_properties = {}
        for argument in arguments:
            if not argument.startswith("--"):
                continue
            dashed_key, equals, value = argument.partition("=")
            if equals != "=":
                continue
            choice_properties[dashed_key[2:]] = value
        self._choices.append(choice_properties)


class DmenuFrontend:
    """A picker based around dmenu."""

    def pick(self, choices):
        """Presents the choices and returns the id chosen or None."""
        lines = []
        for choice_id in choices:
            parts = []
            choice = choices[choice_id]
            if 'title' in choice:
                parts.append(choice['title'])
            if 'cmd' not in choice:
                continue
            parts.append("(%s)" % choice['cmd'])
            if 'id' not in choice:
                continue
            parts.append("||| %s" % choice_id)
            lines.append(" ".join(parts))
        command = [
            "dmenu", "-i", "-l", "6",
            "-fn", "-*-arial-*-r-*-*-*-*-*-*-*-*-*",
            "-nb", "#444", "-nf", "#DDD", "-sb", "#757",
            "-p", "Run:",
        ]
        process = subprocess.Popen(command,
                    stdin=subprocess.PIPE, stdout=subprocess.PIPE)
        stdout, stderr = process.communicate("\n".join(lines))
        if len(stdout) == 0:
            return None
        rest, bars, choice_id = stdout.partition("||| ")
        return choice_id


def main():
    homedir = os.environ['HOME']
    backend_home = os.path.join(homedir, ".launchbear/backends")
    backend_names = os.listdir(backend_home)
    all_choices = {}
    for backend_name in backend_names:
        backend_location = os.path.join(backend_home, backend_name)
        generator = ChoiceGenerator()
        process = subprocess.Popen(backend_location,
                    stdout=subprocess.PIPE, shell=True)
        infile = process.stdout
        generator.parse(infile)
        choices_available = generator.choices()
        all_choices.update(choices_available)
    frontend = DmenuFrontend()
    choice_id = frontend.pick(all_choices)
    if choice_id is not None:
        command = "%s &" % all_choices[choice_id]['cmd']
        subprocess.call(command, shell=True)


if __name__ == '__main__':
    main()


